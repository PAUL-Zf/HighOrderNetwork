{"remainingRequest":"F:\\College\\毕业论文\\cityAnalysis-master\\frontend\\node_modules\\babel-loader\\lib\\index.js!F:\\College\\毕业论文\\cityAnalysis-master\\frontend\\src\\components\\FaceView\\FaceView.js?vue&type=script&lang=js&","dependencies":[{"path":"F:\\College\\毕业论文\\cityAnalysis-master\\frontend\\src\\components\\FaceView\\FaceView.js","mtime":1642954152701},{"path":"F:\\College\\毕业论文\\cityAnalysis-master\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\College\\毕业论文\\cityAnalysis-master\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["F:/College/毕业论文/cityAnalysis-master/frontend/src/components/FaceView/FaceView.js"],"names":["getGroup","dataService","L","bounds","layerGroup","movingMarker","name","components","data","content","mymap","layerGroups","FeatureGroup","direction","props","watch","user","val","display","date","response","console","log","traj","i","length","node","point","push","latlngs","polyline","color","weight","addTo","circle","stroke","radius","fillOpacity","fillColor","fitBounds","getBounds","newQuestion","oldQuestion","clearLayers","a","Math","random","floor","b","mounted","init","on","methods","id","baseLayer","tileLayer","maxZoom","attribution","tileSize","zoomOffset","map","center","LatLng","zoom","preferCanvas","addLayer"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable no-undef */\n/* eslint-disable no-console */\nimport  {getGroup} from './drawFace.js'\nimport 'leaflet/dist/leaflet.css'\nimport dataService from \"@/service/dataService\";\nimport L from \"leaflet\";\nimport {bounds, layerGroup} from \"leaflet/dist/leaflet-src.esm\";\nimport \"leaflet.markercluster\"\nimport \"leaflet.markercluster/dist/MarkerCluster.css\"\nimport \"leaflet.markercluster/dist/MarkerCluster.Default.css\"\nimport \"leaflet.markercluster/dist/leaflet.markercluster\"\n// import dataService from \"@/service/dataService\";\n// import * as Json from \"acorn\";\n// import dataService from '../../service/dataService.js'\n// import * as d3Lasso from 'd3-lasso/build/d3-lasso.min.js';\n// import * as d3 from \"d3\";\n// import pipeService from '../../service/pipeService.js'\n\nimport movingMarker from './MovingMarker'\n\nexport default {\n    name: 'FaceView',\n    components: {},\n    data() {\n        return {\n            // new project\n            content: [],\n            mymap: null,\n            bounds:0,\n            layerGroups:new L.FeatureGroup(),\n            direction : [[0,1],[1,0],[-1,0],[0,-1],[-1,1],[1,-1],[1,1],[-1,-1],]\n        }\n    },\n\n    props: ['user', 'date'],\n\n    watch: {\n\n        user(val) {\n            dataService.display(this.user, this.date, response => {\n                console.log(response.data);\n                this.content = response.data;\n            })\n        },\n\n        date(val) {\n            dataService.display(this.user, this.date, response => {\n                console.log(\"in face view\")\n                console.log(response.data);\n                this.content = response.data;\n            })\n        },\n\n        // update trajectory\n        content(val) {\n            //clear all circles in origin map\n            // this.mymap.eachLayer(layer => {\n            //     if (layer instanceof L.Circle){\n            //         this.mymap.removeLayer(layer);\n            //     }\n            //     if (layer instanceof L.Polyline){\n            //         this.mymap.removeLayer(layer);\n            //     }\n            // })\n\n            let traj = [];\n            // display all points\n            for(let i = 0; i < this.content.length; i++){\n                let node = this.content[i];\n                let point = [node[2], node[3]];\n                traj.push(point);\n            }\n\n            // display all lines\n            let latlngs = traj;\n            let polyline = L.polyline(latlngs, {\n                color: '#5f3c23',\n                weight: 6,\n            }).addTo(this.mymap);\n\n            // display larger circle\n            for(let i = 0; i < traj.length; i++){\n                L.circle(traj[i], {\n                    stroke: false,\n                    radius: 300,\n                    fillOpacity: 1.0,\n                    fillColor: '#5f3c23'\n                }).addTo(this.mymap);\n            }\n\n            // display smaller circle\n            for(let i = 0; i < traj.length; i++){\n                L.circle(traj[i], {\n                    weight: 0.5,\n                    radius: 45,\n                    color: 'black',\n                    fillOpacity: 1.0,\n                    fillColor: '#d3d7d4'\n                }).addTo(this.mymap);\n            }\n\n            this.mymap.fitBounds(polyline.getBounds())\n        },\n\n        bounds: function (newQuestion, oldQuestion) {\n            // this.layerGroups = getGroup()\n            this.layerGroups.clearLayers()\n            let a = Math.random()* 4\n            a = Math.floor(a)\n            let b;\n            b = []\n            for (let i = 0; i < a; i++) {\n                b[i] = Math.floor(Math.random()*7);\n            }\n        }\n\n    },\n\n    mounted: function () {\n        // this.drawFace = new\n        // DrawFace('mapDiv', this.radius);\n        this.mymap = this.init('mapDiv')\n        console.log(this.mymap)\n        this.mymap.on('dragend',()=> {\n            this.bounds = this.mymap.getBounds();\n            // console.log('drag end')\n        })\n        console.log(\"this mounted: \" +this)\n\n    },\n    methods: {\n        init(id) {\n            // function resetSelectedState() {\n            //     map.eachLayer(layer => {\n            //         if (layer instanceof L.Marker) {\n            //             // layer.setIcon(new L.Icon.Default());\n            //         } else if (layer instanceof L.Path) {\n            //             layer.setStyle({ color: '#0088ff',weight:1});\n            //         }\n            //     });\n            //\n            //     // lassoResult.innerHTML = '';\n            // }\n\n            // function setSelectedLayers(layers) {\n            //     resetSelectedState();\n            //     let lat = 0;\n            //     let lng = 0;\n            //     let count = 0;\n            //     layers.forEach(layer => {\n            //         if (layer instanceof L.Marker) {\n            //             // layer.setIcon(new L.Icon.Default({ className: 'selected '}));\n            //         } else if (layer instanceof L.Path ) {\n            //             let bounds = layer.getBounds();\n            //             let latLng = bounds.getCenter();\n            //             lat = lat +latLng.lat;\n            //             lng = lng +latLng.lng;\n            //             count++;\n            //             layer.setStyle({ color: '#ff4620',weight:1 });\n            //         }\n            //     });\n            //     lat = lat/count;\n            //     lng = lng/count;\n            //     console.log(bounds)\n            //     console.log(\"lat: \"+lat);\n            //     console.log(\"lng: \"+lng);\n            //     return [lat,lng];\n            //     // lassoResult.innerHTML = layers.length ? `Selected ${layers.length} layers` : '';\n            // }\n\n            let baseLayer = L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {\n                maxZoom: 20,\n                attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n                    '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n                    'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n                id: 'mapbox/streets-v11',\n                tileSize: 512,\n\n                zoomOffset: -1\n            })\n            let map = new L.map(id, {\n                center: new L.LatLng(40.7143528, -74.0079731),\n                zoom: 11,\n                preferCanvas: true\n            });\n            console.log('in draw')\n            this.layerGroups.addTo(map)\n\n            // create another trajectory\n            let traj = [[40.735614, -74.007132],[40.7679124817876, -73.98507762454408],\n                [40.77143374050618, -73.98247003555298],[40.726121, -73.992822]];\n\n            // display all lines\n            let polyline = L.polyline(traj, {\n                color: '#008792',\n                weight: 6,\n            }).addTo(map);\n\n            // display larger circle\n            for(let i = 0; i < traj.length; i++){\n                L.circle(traj[i], {\n                    stroke: false,\n                    radius: 300,\n                    fillOpacity: 1.0,\n                    fillColor: '#008792'\n                }).addTo(map);\n            }\n\n            // display smaller circle\n            for(let i = 0; i < traj.length; i++){\n                L.circle(traj[i], {\n                    weight: 0.5,\n                    radius: 45,\n                    color: 'black',\n                    fillOpacity: 1.0,\n                    fillColor: '#d3d7d4'\n                }).addTo(map);\n            }\n\n            map.fitBounds(polyline.getBounds());\n\n            // const lassoControl =\n            map.addLayer(baseLayer);\n            // L.control.lasso().addTo(map);\n            // dataService.fetchnode( (returnedData) => {\n            //     // console.log('selectview::fetchProductViewLassoedDataPost: ', returnedData)\n            //     let coords = returnedData.data.coords\n            //     let markers = L.markerClusterGroup();\n            //     console.log(coords)\n            //     for (let i in coords) {\n            //         // console.log(i)\n            //         // console.log(title)\n            //         // console.log(i)\n            //         let title=coords[i]\n            //         let coord = eval(i)\n            //\n            //         markers.addLayer(L.marker(new L.latLng(coord[1],coord[0]),{title:title,}));\n            //     }\n            //     // console.log(markers)\n            //     map.addLayer(markers);\n            //     console.log('finish markders===================')\n            // });\n            //\n            // map.on('zoomed',()=>{\n            //     resetSelectedState();\n            // })\n            //\n            // map.on('mousedown', () => {\n            //     resetSelectedState();\n            // });\n            // let h = 0;\n            // let w = 0;\n            // map.on('lasso.finished', event => {\n            //     let latlng = setSelectedLayers(event.layers);\n            //     // console.log(latlng)\n            //     let b = map.getBounds()\n            //     h = (latlng[0] - b.getSouthWest().lat)/(b.getNorthEast().lat-b.getSouthWest().lat)\n            //     w = (latlng[1] - b.getSouthWest().lng)/(b.getNorthEast().lng-b.getSouthWest().lng)\n            //     // console.log(\"===============\"+this.bound)\n            //     // console.log(h)\n            //     //             console.log(w)\n            //     // console.log(this)\n            //     this.$emit('changeData', w,h);\n            // });\n            //\n            // // console.log(this)\n            // map.on('lasso.enabled', () => {\n            //     // lassoEnabled.innerHTML = 'Enabled';\n            //     resetSelectedState();\n            // });\n            // map.on('lasso.disabled', () => {\n            //     // lassoEnabled.innerHTML = 'Disabled';\n            // });\n\n            // map.getBounds()\n            return map\n        },\n        // changeData() {\n        //     this.$emit('changeData', this.coords);\n        // },\n    }\n}\n"]}]}