{"remainingRequest":"F:\\College\\毕业论文\\cityAnalysis-master\\frontend\\node_modules\\babel-loader\\lib\\index.js!F:\\College\\毕业论文\\cityAnalysis-master\\frontend\\src\\components\\FaceView\\FaceView.js?vue&type=script&lang=js&","dependencies":[{"path":"F:\\College\\毕业论文\\cityAnalysis-master\\frontend\\src\\components\\FaceView\\FaceView.js","mtime":1643251352886},{"path":"F:\\College\\毕业论文\\cityAnalysis-master\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\College\\毕业论文\\cityAnalysis-master\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["F:/College/毕业论文/cityAnalysis-master/frontend/src/components/FaceView/FaceView.js"],"names":["getGroup","dataService","L","bounds","layerGroup","response","name","components","data","content","mymap","layerGroups","FeatureGroup","direction","props","watch","user","val","display","date","console","log","traj","i","length","node","point","push","latlngs","polyline","color","weight","addTo","circle","stroke","radius","fillOpacity","fillColor","fitBounds","getBounds","newQuestion","oldQuestion","clearLayers","a","Math","random","floor","b","mounted","init","on","methods","id","map","center","LatLng","zoom","preferCanvas","baseLayer","tileLayer","attribution","getMap","info","pointLayer","geoJSON","svg","clickable","overlay","d3","select","getPanes","overlayPane","attr","Dots","selectAll","features","enter","append","d","latLngToLayerPoint","geometry","coordinates","x","y","transition","duration","update"],"mappings":"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;AAIdC,UAAAA,SAAS,EAAE;AAJG,SAAlB,EAKGL,KALH,CAKSqB,GALT;AAMH,OAzII,CA2IL;;;AACA,WAAK,IAAI9B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClCrB,QAAAA,CAAC,CAAC+B,MAAF,CAASX,IAAI,CAACC,CAAD,CAAb,EAAkB;AACdQ,UAAAA,MAAM,EAAE,GADM;AAEdI,UAAAA,MAAM,EAAE,EAFM;AAGdL,UAAAA,KAAK,EAAE,OAHO;AAIdM,UAAAA,WAAW,EAAE,GAJC;AAKdC,UAAAA,SAAS,EAAE;AALG,SAAlB,EAMGL,KANH,CAMSqB,GANT;AAOH,OApJI,CAsJL;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,aAAOA,GAAP;AACH,KAhNI,CAiNL;AACA;AACA;;;AAnNK;AAlHE,CAAf","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable no-undef */\n/* eslint-disable no-console */\nimport {getGroup} from './drawFace.js'\nimport 'leaflet/dist/leaflet.css'\nimport dataService from \"@/service/dataService\";\nimport L from \"leaflet\";\nimport {bounds, layerGroup} from \"leaflet/dist/leaflet-src.esm\";\nimport \"leaflet.markercluster\"\nimport \"leaflet.markercluster/dist/MarkerCluster.css\"\nimport \"leaflet.markercluster/dist/MarkerCluster.Default.css\"\nimport \"leaflet.markercluster/dist/leaflet.markercluster\"\nimport response from \"vue-resource/src/http/response\";\n// import dataService from \"@/service/dataService\";\n// import * as Json from \"acorn\";\n// import dataService from '../../service/dataService.js'\n// import * as d3Lasso from 'd3-lasso/build/d3-lasso.min.js';\n// import * as d3 from \"d3\";\n// import pipeService from '../../service/pipeService.js'\n\n\nexport default {\n    name: 'FaceView',\n    components: {},\n    data() {\n        return {\n            // new project\n            content: [],\n            mymap: null,\n            bounds: 0,\n            layerGroups: new L.FeatureGroup(),\n            direction: [[0, 1], [1, 0], [-1, 0], [0, -1], [-1, 1], [1, -1], [1, 1], [-1, -1],]\n        }\n    },\n\n    props: ['user', 'date'],\n\n    watch: {\n\n        user(val) {\n            dataService.display(this.user, this.date, response => {\n                console.log(response.data);\n                this.content = response.data;\n            })\n        },\n\n        date(val) {\n            dataService.display(this.user, this.date, response => {\n                console.log(\"in face view\")\n                console.log(response.data);\n                this.content = response.data;\n            })\n        },\n\n        // update trajectory\n        content(val) {\n            //clear all circles in origin map\n            // this.mymap.eachLayer(layer => {\n            //     if (layer instanceof L.Circle){\n            //         this.mymap.removeLayer(layer);\n            //     }\n            //     if (layer instanceof L.Polyline){\n            //         this.mymap.removeLayer(layer);\n            //     }\n            // })\n\n            let traj = [];\n            // display all points\n            for (let i = 0; i < this.content.length; i++) {\n                let node = this.content[i];\n                let point = [node[2], node[3]];\n                traj.push(point);\n            }\n\n            let latlngs = [[40.726057, -73.991733], [40.74195650925749, -74.00483627296967],\n                [40.74285240592211, -74.00749891494839], [40.742746131478135, -74.00865233240317],\n                [40.738, -74.013], [40.735, -74.014], [40.71509485589921, -74.01641620013078], [40.701593743002, -73.99592399597168],\n                [40.74040459976035, -73.97232055664062]\n            ]\n\n            // display all lines\n            let polyline = L.polyline(latlngs, {\n                color: '#5f3c23',\n                weight: 6,\n            }).addTo(this.mymap);\n\n            // display larger circle\n            for (let i = 0; i < traj.length; i++) {\n                L.circle(traj[i], {\n                    stroke: false,\n                    radius: 300,\n                    fillOpacity: 1.0,\n                    fillColor: '#5f3c23'\n                }).addTo(this.mymap);\n            }\n\n            // display smaller circle\n            for (let i = 0; i < traj.length; i++) {\n                L.circle(traj[i], {\n                    weight: 0.5,\n                    radius: 45,\n                    color: 'black',\n                    fillOpacity: 1.0,\n                    fillColor: '#d3d7d4'\n                }).addTo(this.mymap);\n            }\n\n            this.mymap.fitBounds(polyline.getBounds())\n        },\n\n        bounds: function (newQuestion, oldQuestion) {\n            // this.layerGroups = getGroup()\n            this.layerGroups.clearLayers()\n            let a = Math.random() * 4\n            a = Math.floor(a)\n            let b;\n            b = []\n            for (let i = 0; i < a; i++) {\n                b[i] = Math.floor(Math.random() * 7);\n            }\n        }\n\n    },\n\n    mounted: function () {\n        // this.drawFace = new\n        // DrawFace('mapDiv', this.radius);\n        this.mymap = this.init('mapDiv')\n        this.mymap.on('dragend', () => {\n            this.bounds = this.mymap.getBounds();\n            // console.log('drag end')\n        })\n        console.log(\"this mounted: \" + this)\n\n    },\n    methods: {\n        init(id) {\n            // function resetSelectedState() {\n            //     map.eachLayer(layer => {\n            //         if (layer instanceof L.Marker) {\n            //             // layer.setIcon(new L.Icon.Default());\n            //         } else if (layer instanceof L.Path) {\n            //             layer.setStyle({ color: '#0088ff',weight:1});\n            //         }\n            //     });\n            //\n            //     // lassoResult.innerHTML = '';\n            // }\n\n            // function setSelectedLayers(layers) {\n            //     resetSelectedState();\n            //     let lat = 0;\n            //     let lng = 0;\n            //     let count = 0;\n            //     layers.forEach(layer => {\n            //         if (layer instanceof L.Marker) {\n            //             // layer.setIcon(new L.Icon.Default({ className: 'selected '}));\n            //         } else if (layer instanceof L.Path ) {\n            //             let bounds = layer.getBounds();\n            //             let latLng = bounds.getCenter();\n            //             lat = lat +latLng.lat;\n            //             lng = lng +latLng.lng;\n            //             count++;\n            //             layer.setStyle({ color: '#ff4620',weight:1 });\n            //         }\n            //     });\n            //     lat = lat/count;\n            //     lng = lng/count;\n            //     console.log(bounds)\n            //     console.log(\"lat: \"+lat);\n            //     console.log(\"lng: \"+lng);\n            //     return [lat,lng];\n            //     // lassoResult.innerHTML = layers.length ? `Selected ${layers.length} layers` : '';\n            // }\n\n            // try change leaflet type: The origin type:\n            // let baseLayer = L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {\n            //     maxZoom: 20,\n            //     id: 'mapbox/streets-v11',\n            //     tileSize: 512,\n            //     zoomOffset: -1\n            // })\n\n            let map = new L.map(id, {\n                // (40.7143528, -74.0079731)\n                center: new L.LatLng(53.2527, -123.1207),\n                zoom: 10,\n                preferCanvas: true\n            });\n\n            let baseLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n                attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            }).addTo(map);\n\n            console.log('in draw')\n            this.layerGroups.addTo(map)\n\n            // add geoJson layer\n            // dataService.getVanAreasMap(response => {\n            //     let VanAreas = response.data\n            //\n            //     let VanAreasLayer = L.geoJson(VanAreas, { //instantiates a new geoJson layer using built in geoJson handling\n            //         weight: 2, //Attributes of polygons including the weight of boundaries and colors of map.\n            //         color: \"#432\",\n            //     }).bindPopup(function (Layer) { //binds a popup when clicking on each polygon to access underlying data\n            //         return Layer.feature.properties.NAME;\n            //     }).addTo(map);\n            //\n            //     // Automatically fit\n            //     map.fitBounds(VanAreasLayer.getBounds());\n            // })\n\n            // display points in D3 and leaflet\n            dataService.getMap(response => {\n                let info = response.data;\n                let pointLayer = L.geoJSON(info).addTo(map);\n                map.fitBounds(pointLayer.getBounds());\n\n                L.svg({clickable: true}).addTo(map)\n\n                const overlay = d3.select(map.getPanes().overlayPane)\n                const svg = overlay.select('svg').attr(\"pointer-events\", \"auto\")\n\n                const Dots = svg.selectAll('circle')\n                    .attr(\"class\", \"Dots\")\n                    .data(info.features)\n                    .enter().append('circle')\n                    // .join('circle')\n                    .attr(\"id\", \"dotties\")\n                    .attr(\"fill\", \"steelblue\")\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"cx\", d => map.latLngToLayerPoint([d.geometry.coordinates[1], d.geometry.coordinates[0]]).x)\n                    .attr(\"cy\", d => map.latLngToLayerPoint([d.geometry.coordinates[1], d.geometry.coordinates[0]]).y)\n                    .attr(\"r\", 5)\n                    .on('mouseover', function () { //function to add mouseover event\n                        d3.select(this).transition() //D3 selects the object we have moused over in order to perform operations on it\n                            .duration('150') //how long we are transitioning between the two states (works like keyframes)\n                            .attr(\"fill\", \"red\") //change the fill\n                            .attr('r', 10) //change radius\n                    })\n                    .on('mouseout', function () { //reverse the action based on when we mouse off the the circle\n                        d3.select(this).transition()\n                            .duration('150')\n                            .attr(\"fill\", \"steelblue\")\n                            .attr('r', 5)\n                    });\n\n                const update = () => Dots\n                    .attr(\"cx\", d => map.latLngToLayerPoint([d.geometry.coordinates[1], d.geometry.coordinates[0]]).x)\n                    .attr(\"cy\", d => map.latLngToLayerPoint([d.geometry.coordinates[1], d.geometry.coordinates[0]]).y)\n\n\n                map.on(\"zoomend\", update)\n            })\n\n            // create another trajectory\n            let traj = [[40.735614, -74.007132], [40.7679124817876, -73.98507762454408],\n                [40.77143374050618, -73.98247003555298], [40.726121, -73.992822]];\n\n            // display all lines\n            let polyline = L.polyline(traj, {\n                color: '#008792',\n                weight: 6,\n            }).addTo(map);\n\n            // display larger circle\n            for (let i = 0; i < traj.length; i++) {\n                L.circle(traj[i], {\n                    stroke: false,\n                    radius: 400,\n                    fillOpacity: 1.0,\n                    fillColor: '#008792'\n                }).addTo(map);\n            }\n\n            // display smaller circle\n            for (let i = 0; i < traj.length; i++) {\n                L.circle(traj[i], {\n                    weight: 0.5,\n                    radius: 45,\n                    color: 'black',\n                    fillOpacity: 1.0,\n                    fillColor: '#d3d7d4'\n                }).addTo(map);\n            }\n\n            // map.fitBounds(polyline.getBounds());\n            // map.addLayer(baseLayer);\n\n\n            // L.control.lasso().addTo(map);\n            // dataService.fetchnode( (returnedData) => {\n            //     // console.log('selectview::fetchProductViewLassoedDataPost: ', returnedData)\n            //     let coords = returnedData.data.coords\n            //     let markers = L.markerClusterGroup();\n            //     console.log(coords)\n            //     for (let i in coords) {\n            //         // console.log(i)\n            //         // console.log(title)\n            //         // console.log(i)\n            //         let title=coords[i]\n            //         let coord = eval(i)\n            //\n            //         markers.addLayer(L.marker(new L.latLng(coord[1],coord[0]),{title:title,}));\n            //     }\n            //     // console.log(markers)\n            //     map.addLayer(markers);\n            //     console.log('finish markders===================')\n            // });\n            //\n            // map.on('zoomed',()=>{\n            //     resetSelectedState();\n            // })\n            //\n            // map.on('mousedown', () => {\n            //     resetSelectedState();\n            // });\n            // let h = 0;\n            // let w = 0;\n            // map.on('lasso.finished', event => {\n            //     let latlng = setSelectedLayers(event.layers);\n            //     // console.log(latlng)\n            //     let b = map.getBounds()\n            //     h = (latlng[0] - b.getSouthWest().lat)/(b.getNorthEast().lat-b.getSouthWest().lat)\n            //     w = (latlng[1] - b.getSouthWest().lng)/(b.getNorthEast().lng-b.getSouthWest().lng)\n            //     // console.log(\"===============\"+this.bound)\n            //     // console.log(h)\n            //     //             console.log(w)\n            //     // console.log(this)\n            //     this.$emit('changeData', w,h);\n            // });\n            //\n            // // console.log(this)\n            // map.on('lasso.enabled', () => {\n            //     // lassoEnabled.innerHTML = 'Enabled';\n            //     resetSelectedState();\n            // });\n            // map.on('lasso.disabled', () => {\n            //     // lassoEnabled.innerHTML = 'Disabled';\n            // });\n\n            // map.getBounds()\n            return map\n        },\n        // changeData() {\n        //     this.$emit('changeData', this.coords);\n        // },\n    }\n}\n"]}]}